// Code generated by MockGen. DO NOT EDIT.
// Source: internal/currency/application/command/currency.interface.go

// Package command is a generated GoMock package.
package command

import (
	context "context"
	reflect "reflect"

	model "github.com/angryronald/currency-service/internal/currency/application/model"
	gomock "github.com/golang/mock/gomock"
)

// MockCurrencyCommandInterface is a mock of CurrencyCommandInterface interface.
type MockCurrencyCommandInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyCommandInterfaceMockRecorder
}

// MockCurrencyCommandInterfaceMockRecorder is the mock recorder for MockCurrencyCommandInterface.
type MockCurrencyCommandInterfaceMockRecorder struct {
	mock *MockCurrencyCommandInterface
}

// NewMockCurrencyCommandInterface creates a new mock instance.
func NewMockCurrencyCommandInterface(ctrl *gomock.Controller) *MockCurrencyCommandInterface {
	mock := &MockCurrencyCommandInterface{ctrl: ctrl}
	mock.recorder = &MockCurrencyCommandInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencyCommandInterface) EXPECT() *MockCurrencyCommandInterfaceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockCurrencyCommandInterface) Add(ctx context.Context, currency *model.CurrencyApplicationModel) (*model.CurrencyApplicationModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, currency)
	ret0, _ := ret[0].(*model.CurrencyApplicationModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockCurrencyCommandInterfaceMockRecorder) Add(ctx, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCurrencyCommandInterface)(nil).Add), ctx, currency)
}

// MultipleAddOrUpdate mocks base method.
func (m *MockCurrencyCommandInterface) MultipleAddOrUpdate(ctx context.Context, currencies []*model.CurrencyApplicationModel) ([]*model.CurrencyApplicationModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultipleAddOrUpdate", ctx, currencies)
	ret0, _ := ret[0].([]*model.CurrencyApplicationModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultipleAddOrUpdate indicates an expected call of MultipleAddOrUpdate.
func (mr *MockCurrencyCommandInterfaceMockRecorder) MultipleAddOrUpdate(ctx, currencies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultipleAddOrUpdate", reflect.TypeOf((*MockCurrencyCommandInterface)(nil).MultipleAddOrUpdate), ctx, currencies)
}
